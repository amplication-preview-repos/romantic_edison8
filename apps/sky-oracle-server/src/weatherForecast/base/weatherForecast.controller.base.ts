/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WeatherForecastService } from "../weatherForecast.service";
import { WeatherForecastCreateInput } from "./WeatherForecastCreateInput";
import { WeatherForecast } from "./WeatherForecast";
import { WeatherForecastFindManyArgs } from "./WeatherForecastFindManyArgs";
import { WeatherForecastWhereUniqueInput } from "./WeatherForecastWhereUniqueInput";
import { WeatherForecastUpdateInput } from "./WeatherForecastUpdateInput";

export class WeatherForecastControllerBase {
  constructor(protected readonly service: WeatherForecastService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WeatherForecast })
  async createWeatherForecast(
    @common.Body() data: WeatherForecastCreateInput
  ): Promise<WeatherForecast> {
    return await this.service.createWeatherForecast({
      data: {
        ...data,

        location: data.location
          ? {
              connect: data.location,
            }
          : undefined,
      },
      select: {
        condition: true,
        createdAt: true,
        forecastTime: true,
        id: true,

        location: {
          select: {
            id: true,
          },
        },

        temperature: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WeatherForecast] })
  @ApiNestedQuery(WeatherForecastFindManyArgs)
  async weatherForecasts(
    @common.Req() request: Request
  ): Promise<WeatherForecast[]> {
    const args = plainToClass(WeatherForecastFindManyArgs, request.query);
    return this.service.weatherForecasts({
      ...args,
      select: {
        condition: true,
        createdAt: true,
        forecastTime: true,
        id: true,

        location: {
          select: {
            id: true,
          },
        },

        temperature: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WeatherForecast })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async weatherForecast(
    @common.Param() params: WeatherForecastWhereUniqueInput
  ): Promise<WeatherForecast | null> {
    const result = await this.service.weatherForecast({
      where: params,
      select: {
        condition: true,
        createdAt: true,
        forecastTime: true,
        id: true,

        location: {
          select: {
            id: true,
          },
        },

        temperature: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WeatherForecast })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWeatherForecast(
    @common.Param() params: WeatherForecastWhereUniqueInput,
    @common.Body() data: WeatherForecastUpdateInput
  ): Promise<WeatherForecast | null> {
    try {
      return await this.service.updateWeatherForecast({
        where: params,
        data: {
          ...data,

          location: data.location
            ? {
                connect: data.location,
              }
            : undefined,
        },
        select: {
          condition: true,
          createdAt: true,
          forecastTime: true,
          id: true,

          location: {
            select: {
              id: true,
            },
          },

          temperature: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WeatherForecast })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWeatherForecast(
    @common.Param() params: WeatherForecastWhereUniqueInput
  ): Promise<WeatherForecast | null> {
    try {
      return await this.service.deleteWeatherForecast({
        where: params,
        select: {
          condition: true,
          createdAt: true,
          forecastTime: true,
          id: true,

          location: {
            select: {
              id: true,
            },
          },

          temperature: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
